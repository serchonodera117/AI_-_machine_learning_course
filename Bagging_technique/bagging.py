# -*- coding: utf-8 -*-
"""Bagging.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USlAv7HTXFar7BR1dOM9ChDPXu9Rg7_G
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

people = pd.read_csv("salarios.csv")
people

#sampling

for  i in range(5):
  print(people.sample(frac=1/10), "\n")

#scaling data
people = MinMaxScaler().fit_transform(people)
people

#preview of our data
fig = plt.figure(figsize=(14,5))

#graphic of dispersion  -> Age, Studies & hours
ax = fig.add_subplot(1,3,1, projection="3d")
colors = ("pink", "purple")

for clase in (0,1):
  ax.scatter(people.T[0][people.T[3]==clase],
             people.T[1][people.T[3]==clase],
             people.T[2][people.T[3]==clase],
             marker="*", c=colors[clase], s=200
             )

ax.set_xlabel("Age", size=14)
ax.set_ylabel("Studies", size=14)
ax.set_zlabel("Hours", size=14)
ax.view_init(45,45)

#histogram -> salary class
ax = fig.add_subplot(1,3,2)
ax.hist(people.T[3], bins=2, histtype="step", color="indianred")
ax.set_xlabel("Salary", size=14)
ax.set_ylabel("Person", size=14)
#plt.step(ax.spines.values(), linewidth=0)

#view of salary of people
ax = fig.add_subplot(1,3,3)
ax.plot(people.T[4], marker="o", linewidth=0, color="purple")
ax.plot([0.5]*100, linewidth = 5)
ax.set_ylabel("Salary", size=14)
ax.set_xlabel("Person", size=14)
#plt.step(ax.spines.values(), linewidth=0)
plt.show()

#cration of metamodels by Bagging techniques
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import BaggingRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score


#separating feautres from objective varibales
data = people.T[:-2].T    #features
clase = people.T[3]       #salary class
valor = people.T[4]       #Numeric salary

#Base Classifier and Base regresor
myClassifier = KNeighborsClassifier(n_neighbors=3)
regresor = KNeighborsRegressor(n_neighbors=3)

n = 50 #num of model 1vs 50

#Bagging models for classifier and regresion with 30% of sample
meta_classifier = BaggingClassifier(base_estimator=myClassifier,
                                    n_estimators=n,
                                    max_samples=0.30).fit(data, clase)

meta_regresor = BaggingRegressor(base_estimator=regresor,
                                 n_estimators=n,
                                 max_samples=0.30).fit(data, valor)


#relevant metrics to clasification and determination
print("Accuracy:",
      accuracy_score(clase, meta_classifier.predict(data)))
print("Coefficient:",
      r2_score(valor, meta_regresor.predict(data)))