# -*- coding: utf-8 -*-
"""gini_impurity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCKEzLdgbFVdWQiofNicvOmEdgeP3MIY
"""

#impurity Gini, a metric to calculate how probable is to clasify in a  wrong way
import pandas as pd

puntos_partido = pd.Series(["alto", "bajo", "alto", "alto", "alto",
                            "alto", "bajo", "alto", "alto", "alto"])

minutos_partido = pd.Series(["alto", "alto", "bajo", "bajo", "bajo",
                            "alto", "bajo", "bajo", "bajo", "bajo"])

rebotes_partido = pd.Series(["alto", "bajo", "bajo", "alto", "bajo",
                            "alto", "bajo", "alto", "bajo", "alto"])

asistencias_partido = pd.Series(["bajo", "bajo", "bajo", "bajo", "bajo",
                                 "bajo", "bajo", "bajo", "bajo", "bajo"])

#1: veteran (career of 5 year or more)
myClass = pd.Series([1,0,0,1,0,1,0,1,0,1])

myData = pd.DataFrame({
                      "puntos": puntos_partido,
                      "minutos": minutos_partido,
                      "asistencias": asistencias_partido,
                      "rebotes": rebotes_partido,
                      "clase": myClass
                      })

#interpretation of impurity gini

def impurity_gini(feature, theClass, thedata):
  #str, str, dataframe -> float
  atribute_class  = thedata.groupby([feature, theClass])[theClass].count()
  atribute = thedata.groupby([feature])[theClass].count()
  processed = pd.merge(atribute_class, atribute, on=[feature],
                       suffixes=("_individual", "_total"))
  processed["combinacion"]= (processed[theClass+"_individual"]/processed[theClass+"_total"])**2
  gini_combnation = 1 - processed.groupby([feature, theClass + "_total"])["combinacion"].sum()
  gini_heavy = (gini_combnation*atribute)/atribute.sum()
  return gini_heavy.sum()



print("puntos -> impureza: %0.4f" % impurity_gini("puntos", "clase", myData))
print("minutos -> impureza: %0.4f" % impurity_gini("minutos", "clase", myData))
print("asistencias -> impureza: %0.4f" % impurity_gini("asistencias", "clase", myData))
print("rebotes -> impureza: %0.4f" % impurity_gini("rebotes", "clase", myData))

myData

#impurity of atribute puntos
#how many players per cathegory of pouts and gor class (beginner and veteran)
puntos_y_clase = myData.groupby(["puntos", "clase"])["clase"].count()

print("\n\n\JUGADORES POR PUNTOS Y CLASEn\n", puntos_y_clase)

#how many players per cathegory of points
puntos = myData.groupby(["puntos"])["clase"].count()
print("jugadores por puntos \n", puntos)

#jpin both data series to process
jugadores = pd.merge(
    puntos_y_clase,
    puntos,
    on=["puntos"],
    suffixes=('_individual', '_total')
)

print("\n\nUNION\n\n", jugadores)

# Probabilidad para cada categoría de puntos con respecto a la clase
jugadores["combinaciones"] = (jugadores["clase_individual"]/jugadores["clase_total"])**2
print(jugadores)

# Impureza gini para cada combinación
gini_por_combinacion = 1 - jugadores.groupby(["puntos", "clase_total"])["combinaciones"].sum()
print("\n\n",gini_por_combinacion)

# Impureza gini para cada combinación con pesos
gini_con_peso_por_combinacion = (gini_por_combinacion * puntos) / puntos.sum()
print("\n\n", gini_con_peso_por_combinacion)
print("\n", gini_con_peso_por_combinacion.sum())