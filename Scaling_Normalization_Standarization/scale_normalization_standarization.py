# -*- coding: utf-8 -*-
"""Scale_normalization_standarization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SDd0bMu1_HwXXH1PBJ6YGsMDFE291ca0
"""

#scale, norma and standarization
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing

data = pd.read_csv("datos_personas.csv")

fig = plt.figure(figsize=(15,5))
ax1 = fig.add_subplot(1,3,1)
ax2 = fig.add_subplot(1,3,2)
ax3 = fig.add_subplot(1,3,3)
ax1.set_title("Original Data together")
ax1.plot(data)
ax2.set_title("Ingreso")
ax2.plot(data["ingreso"], linewidth=0, marker="o", color="blue", markersize=6)
ax3.set_title("carros")
ax3.plot(data["carros"], linewidth=0, marker="+", color="orange", markersize=16)

plt.show()

fig = plt.figure(figsize=(8,8))
ax1 = fig.add_subplot(2,3,1)
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
ax4 = fig.add_subplot(2,2,4)
ax1.set_title("Ingreso")
ax1.plot(data["ingreso"], linewidth=0, marker="o", color="blue", markersize=6)
ax2.set_title("Carros")
ax2.plot(data["carros"], linewidth=0, marker="+", color="orange", markersize=16)
ax3.set_title("Ingreso")
ax3.hist(data["ingreso"], bins=100, color="blue")
ax4.set_title("carros")
ax4.hist(data["carros"], bins=100, color="orange")

plt.show()

#scalation of min annd max
dataMinMax = preprocessing.MinMaxScaler().fit_transform(data)
dataMinMax

#Normalization on finction in Verctor rule
data_to_normalize = preprocessing.Normalizer().transform(data.T)
data_to_normalize = data_to_normalize.T
#normalize = x /sqrt(x1_1^2 + x_3^2 + . . . )
data_to_normalize

#standarization (desv_std = 1, media = 0)
data_standar_scaler = preprocessing.StandardScaler().fit_transform(data)
#sndaraz = (x-media)/std

data_robust_scaler = preprocessing.RobustScaler().fit_transform(data)
#standar = (x - range_interqualified)/std

data_standar_scaler, data_robust_scaler

#column of inputs: comparation of methods
data_min_max = pd.DataFrame(dataMinMax, columns=["ingreso", "carros"])
data_normalize = pd.DataFrame(data_to_normalize, columns=["ingreso", "carros"])
data_standar = pd.DataFrame(data_standar_scaler, columns=["ingreso", "carros"])
data_robust = pd.DataFrame(data_robust_scaler, columns=["ingreso", "carros"])

fig = plt.figure(figsize = (15,3))
ax1 = fig.add_subplot(1,5,1)
ax2 = fig.add_subplot(1,5,2)
ax3 = fig.add_subplot(1,5,3)
ax4 = fig.add_subplot(1,5,4)
ax5 = fig.add_subplot(1,5,5)

#creation of personalization and data series
ax1.set_title("Ingereso")
ax1.plot(data["ingreso"], linewidth=0, marker = "*", color="red", markersize=4)

ax2.set_title("MinMax")
ax2.plot(data_min_max["ingreso"], linewidth=0, marker = "*", color="red", markersize=4)

ax3.set_title("Normalizer")
ax3.plot(data_normalize["ingreso"], linewidth=0, marker = "*", color="red", markersize=4)
ax3.set_ylim(0,1)

ax4.set_title("Standard scaler")
ax4.plot(data_standar["ingreso"], linewidth=0, marker = "*", color="red", markersize=4)

ax5.set_title("Robust scaler")
ax5.plot(data_robust["ingreso"], linewidth=0, marker = "*", color="red", markersize=4)

plt.show()





fig = plt.figure(figsize = (15,3))
ax1 = fig.add_subplot(1,5,1)
ax2 = fig.add_subplot(1,5,2)
ax3 = fig.add_subplot(1,5,3)
ax4 = fig.add_subplot(1,5,4)
ax5 = fig.add_subplot(1,5,5)

#creation of personalization and data series
ax1.set_title("Ingereso")
ax1.hist(data["ingreso"], linewidth=0, color="red", bins=100)

ax2.set_title("Min Max")
ax2.hist(data_min_max["ingreso"], linewidth=0, color="red", bins=100) #Min max

ax3.set_title("Normalizer")
ax3.hist(data_normalize["ingreso"], linewidth=0, color="red", bins=100) #Normalizer

ax4.set_title("Standard scaler")
ax4.hist(data_standar["ingreso"], linewidth=0, color="red", bins=100) #standarization scale

ax5.set_title("Robust scaler")
ax5.hist(data_robust["ingreso"], linewidth=0, color="red", bins=100) #robust scale

plt.show()

fig = plt.figure(figsize = (15,3))
ax1 = fig.add_subplot(1,5,1)
ax2 = fig.add_subplot(1,5,2)
ax3 = fig.add_subplot(1,5,3)
ax4 = fig.add_subplot(1,5,4)
ax5 = fig.add_subplot(1,5,5)

#creation of personalization and data series
ax1.set_title("Cars")
ax1.plot(data["carros"], linewidth=0, marker = "*", color="blue", markersize=4)

ax2.set_title("MinMax")
ax2.plot(data_min_max["carros"], linewidth=0, marker = "*", color="blue", markersize=4)

ax3.set_title("Normalizer")
ax3.plot(data_normalize["carros"], linewidth=0, marker = "*", color="blue", markersize=4)
ax3.set_ylim(0,1)

ax4.set_title("Standard scaler")
ax4.plot(data_standar["carros"], linewidth=0, marker = "*", color="blue", markersize=4)

ax5.set_title("Robust scaler")
ax5.plot(data_robust["carros"], linewidth=0, marker = "*", color="blue", markersize=4)

plt.show()





fig = plt.figure(figsize = (15,3))
ax1 = fig.add_subplot(1,5,1)
ax2 = fig.add_subplot(1,5,2)
ax3 = fig.add_subplot(1,5,3)
ax4 = fig.add_subplot(1,5,4)
ax5 = fig.add_subplot(1,5,5)

#creation of personalization and data series
ax1.set_title("Cars")
ax1.hist(data["carros"], linewidth=0, color="blue", bins=100)

ax2.set_title("Min Max")
ax2.hist(data_min_max["carros"], linewidth=0, color="blue", bins=100) #Min max

ax3.set_title("Normalizer")
ax3.hist(data_normalize["carros"], linewidth=0, color="blue", bins=100) #Normalizer

ax4.set_title("Standard scaler")
ax4.hist(data_standar["carros"], linewidth=0, color="blue", bins=100) #standarization scale

ax5.set_title("Robust scaler")
ax5.hist(data_robust["carros"], linewidth=0, color="blue", bins=100) #robust scale

plt.show()