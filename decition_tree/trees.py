# -*- coding: utf-8 -*-
"""trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gZVk_ZMvAQrksKntUxBqVKVuY5SXxTWK
"""

#white box technique, desicion tree
import pandas as pd
import matplotlib.pyplot as plt

#entropy
from scipy.stats import entropy
from math import log

#training data
from sklearn.model_selection import train_test_split

patients = pd.read_csv("pacientes.csv")
healthies = patients[patients["problema_cardiaco"]==0]
cardiacs = patients[patients["problema_cardiaco"]==1]

plt.figure(figsize=(6,6))
plt.xlabel("Age", fontsize = 20.0)
plt.ylabel("Colesterol",fontsize = 20.0)

plt.scatter(healthies["edad"] ,healthies["colesterol"],
            label="Healthy (Clase:0)", marker="*", c="skyblue", s=200)


plt.scatter(cardiacs["edad"], cardiacs["colesterol"],
             label="Cardiac (Clase:1)", marker="*", c="lightcoral", s=200)

plt.legend(bbox_to_anchor=(1, 0.15))
plt.show

# print(log(2,2))

# #entropy of how probably is get one face from a trhowing of a coin
# print(entropy([1/2, 1/2], base=2))
# print(entropy([10/10, 0/10], base=2))

ages = pd.Series([40,30,20,50])
colesterol = pd.Series([100,110,100,110])

print(ages.value_counts()/ages.size)
print(colesterol.value_counts()/colesterol.size)
print(entropy(ages.value_counts()/ages.size, base=2))
print(entropy(colesterol.value_counts()/colesterol.size, base=2))

training_data, test_data, training_class, test_class = train_test_split(
    patients[["edad", "colesterol"]],
    patients["problema_cardiaco"],
    test_size=0.30)

#creation of desision tree
from sklearn import tree
desision_tree = tree.DecisionTreeClassifier(criterion="entropy") #max_depht=2

arbol = desision_tree.fit(training_data, training_class)

#pressition of precise is it
accuracy = desision_tree.score(test_data, test_class)
print(accuracy)
print(tree.export_text(arbol, feature_names=["Age", "Colesterol"]))

plt.figure(figsize=(12,6))
tree.plot_tree(arbol,feature_names=["Age", "Colesterol"])

plt.show()

#by adding new patient

print("New patient", desision_tree.predict([[70, 150]]))