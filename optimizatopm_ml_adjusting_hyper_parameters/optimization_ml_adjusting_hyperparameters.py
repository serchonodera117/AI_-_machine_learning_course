# -*- coding: utf-8 -*-
"""optimization_ml_adjusting_hyperparameters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13gi4rXBUPALLBw8uy1DGtU2c8H3_s_Z3
"""

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
people = pd.read_csv("ingresos.csv")

myForest = RandomForestClassifier()
#get parameters
myForest.get_params()

params = {
    "criterion": ("gini", "entropy"),
    "n_estimators": (10,20,30),
    "max_samples": (1/3, 2/3)
    }

myGrid = GridSearchCV(myForest,
                      params,
                      scoring="accuracy")
myGrid.fit(people[people.columns[:-1]].values,
           people["ingreso"].values)

sorted(myGrid.cv_results_.keys())

myGrid.cv_results_["params"]

print(myGrid.cv_results_["rank_test_score"])
print(myGrid.cv_results_["mean_test_score"])
print(myGrid.best_score_)
print(myGrid.best_params_)

#this tehcnique creates many models in function of the best resoults of training or the estimation, you can acces to the "winner" model
#selects the best model by default
print(myGrid.predict([[50,16,1,1,40]]))

#manually the best model can be chosen
best_model = myGrid.best_estimator_

print(best_model.predict([[50,16,1,1,40]]))

#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| randomized search
parameters = {
    "criterion": ("gini", "entropy"),
    "n_estimators": (10, 20, 30),
    "max_samples": (1/3, 2/3)
}

randomizedGrid = RandomizedSearchCV(myForest,
                                    parameters,
                                    scoring="accuracy",
                                    cv=5,
                                    n_iter=3) #only search in three parameters
randomizedGrid.fit(people[people.columns[:-1]].values,
                   people["ingreso"].values)

randomizedGrid.cv_results_["params"]